/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mahoni.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AirQualityProcessedSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7270881817717146832L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AirQualityProcessedSchema\",\"namespace\":\"com.mahoni.schema\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sensorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"aqi\",\"type\":\"double\"},{\"name\":\"no2\",\"type\":\"double\"},{\"name\":\"pm25\",\"type\":\"double\"},{\"name\":\"pm10\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AirQualityProcessedSchema> ENCODER =
      new BinaryMessageEncoder<AirQualityProcessedSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AirQualityProcessedSchema> DECODER =
      new BinaryMessageDecoder<AirQualityProcessedSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AirQualityProcessedSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AirQualityProcessedSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AirQualityProcessedSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AirQualityProcessedSchema>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AirQualityProcessedSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AirQualityProcessedSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AirQualityProcessedSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AirQualityProcessedSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String eventId;
   private java.lang.String sensorId;
   private long timestamp;
   private double aqi;
   private double no2;
   private double pm25;
   private double pm10;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AirQualityProcessedSchema() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param sensorId The new value for sensorId
   * @param timestamp The new value for timestamp
   * @param aqi The new value for aqi
   * @param no2 The new value for no2
   * @param pm25 The new value for pm25
   * @param pm10 The new value for pm10
   */
  public AirQualityProcessedSchema(java.lang.String eventId, java.lang.String sensorId, java.lang.Long timestamp, java.lang.Double aqi, java.lang.Double no2, java.lang.Double pm25, java.lang.Double pm10) {
    this.eventId = eventId;
    this.sensorId = sensorId;
    this.timestamp = timestamp;
    this.aqi = aqi;
    this.no2 = no2;
    this.pm25 = pm25;
    this.pm10 = pm10;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return sensorId;
    case 2: return timestamp;
    case 3: return aqi;
    case 4: return no2;
    case 5: return pm25;
    case 6: return pm10;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = value$ != null ? value$.toString() : null; break;
    case 1: sensorId = value$ != null ? value$.toString() : null; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: aqi = (java.lang.Double)value$; break;
    case 4: no2 = (java.lang.Double)value$; break;
    case 5: pm25 = (java.lang.Double)value$; break;
    case 6: pm10 = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return The value of the 'sensorId' field.
   */
  public java.lang.String getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * @param value the value to set.
   */
  public void setSensorId(java.lang.String value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'aqi' field.
   * @return The value of the 'aqi' field.
   */
  public double getAqi() {
    return aqi;
  }


  /**
   * Sets the value of the 'aqi' field.
   * @param value the value to set.
   */
  public void setAqi(double value) {
    this.aqi = value;
  }

  /**
   * Gets the value of the 'no2' field.
   * @return The value of the 'no2' field.
   */
  public double getNo2() {
    return no2;
  }


  /**
   * Sets the value of the 'no2' field.
   * @param value the value to set.
   */
  public void setNo2(double value) {
    this.no2 = value;
  }

  /**
   * Gets the value of the 'pm25' field.
   * @return The value of the 'pm25' field.
   */
  public double getPm25() {
    return pm25;
  }


  /**
   * Sets the value of the 'pm25' field.
   * @param value the value to set.
   */
  public void setPm25(double value) {
    this.pm25 = value;
  }

  /**
   * Gets the value of the 'pm10' field.
   * @return The value of the 'pm10' field.
   */
  public double getPm10() {
    return pm10;
  }


  /**
   * Sets the value of the 'pm10' field.
   * @param value the value to set.
   */
  public void setPm10(double value) {
    this.pm10 = value;
  }

  /**
   * Creates a new AirQualityProcessedSchema RecordBuilder.
   * @return A new AirQualityProcessedSchema RecordBuilder
   */
  public static com.mahoni.schema.AirQualityProcessedSchema.Builder newBuilder() {
    return new com.mahoni.schema.AirQualityProcessedSchema.Builder();
  }

  /**
   * Creates a new AirQualityProcessedSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AirQualityProcessedSchema RecordBuilder
   */
  public static com.mahoni.schema.AirQualityProcessedSchema.Builder newBuilder(com.mahoni.schema.AirQualityProcessedSchema.Builder other) {
    if (other == null) {
      return new com.mahoni.schema.AirQualityProcessedSchema.Builder();
    } else {
      return new com.mahoni.schema.AirQualityProcessedSchema.Builder(other);
    }
  }

  /**
   * Creates a new AirQualityProcessedSchema RecordBuilder by copying an existing AirQualityProcessedSchema instance.
   * @param other The existing instance to copy.
   * @return A new AirQualityProcessedSchema RecordBuilder
   */
  public static com.mahoni.schema.AirQualityProcessedSchema.Builder newBuilder(com.mahoni.schema.AirQualityProcessedSchema other) {
    if (other == null) {
      return new com.mahoni.schema.AirQualityProcessedSchema.Builder();
    } else {
      return new com.mahoni.schema.AirQualityProcessedSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for AirQualityProcessedSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AirQualityProcessedSchema>
    implements org.apache.avro.data.RecordBuilder<AirQualityProcessedSchema> {

    private java.lang.String eventId;
    private java.lang.String sensorId;
    private long timestamp;
    private double aqi;
    private double no2;
    private double pm25;
    private double pm10;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mahoni.schema.AirQualityProcessedSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.aqi)) {
        this.aqi = data().deepCopy(fields()[3].schema(), other.aqi);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.no2)) {
        this.no2 = data().deepCopy(fields()[4].schema(), other.no2);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.pm25)) {
        this.pm25 = data().deepCopy(fields()[5].schema(), other.pm25);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[6].schema(), other.pm10);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AirQualityProcessedSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mahoni.schema.AirQualityProcessedSchema other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aqi)) {
        this.aqi = data().deepCopy(fields()[3].schema(), other.aqi);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.no2)) {
        this.no2 = data().deepCopy(fields()[4].schema(), other.no2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pm25)) {
        this.pm25 = data().deepCopy(fields()[5].schema(), other.pm25);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[6].schema(), other.pm10);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensorId' field.
      * @return The value.
      */
    public java.lang.String getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setSensorId(java.lang.String value) {
      validate(fields()[1], value);
      this.sensorId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearSensorId() {
      sensorId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'aqi' field.
      * @return The value.
      */
    public double getAqi() {
      return aqi;
    }


    /**
      * Sets the value of the 'aqi' field.
      * @param value The value of 'aqi'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setAqi(double value) {
      validate(fields()[3], value);
      this.aqi = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'aqi' field has been set.
      * @return True if the 'aqi' field has been set, false otherwise.
      */
    public boolean hasAqi() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'aqi' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearAqi() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'no2' field.
      * @return The value.
      */
    public double getNo2() {
      return no2;
    }


    /**
      * Sets the value of the 'no2' field.
      * @param value The value of 'no2'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setNo2(double value) {
      validate(fields()[4], value);
      this.no2 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'no2' field has been set.
      * @return True if the 'no2' field has been set, false otherwise.
      */
    public boolean hasNo2() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'no2' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearNo2() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm25' field.
      * @return The value.
      */
    public double getPm25() {
      return pm25;
    }


    /**
      * Sets the value of the 'pm25' field.
      * @param value The value of 'pm25'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setPm25(double value) {
      validate(fields()[5], value);
      this.pm25 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'pm25' field has been set.
      * @return True if the 'pm25' field has been set, false otherwise.
      */
    public boolean hasPm25() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'pm25' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearPm25() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm10' field.
      * @return The value.
      */
    public double getPm10() {
      return pm10;
    }


    /**
      * Sets the value of the 'pm10' field.
      * @param value The value of 'pm10'.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder setPm10(double value) {
      validate(fields()[6], value);
      this.pm10 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'pm10' field has been set.
      * @return True if the 'pm10' field has been set, false otherwise.
      */
    public boolean hasPm10() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'pm10' field.
      * @return This builder.
      */
    public com.mahoni.schema.AirQualityProcessedSchema.Builder clearPm10() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AirQualityProcessedSchema build() {
      try {
        AirQualityProcessedSchema record = new AirQualityProcessedSchema();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.sensorId = fieldSetFlags()[1] ? this.sensorId : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.aqi = fieldSetFlags()[3] ? this.aqi : (java.lang.Double) defaultValue(fields()[3]);
        record.no2 = fieldSetFlags()[4] ? this.no2 : (java.lang.Double) defaultValue(fields()[4]);
        record.pm25 = fieldSetFlags()[5] ? this.pm25 : (java.lang.Double) defaultValue(fields()[5]);
        record.pm10 = fieldSetFlags()[6] ? this.pm10 : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AirQualityProcessedSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<AirQualityProcessedSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AirQualityProcessedSchema>
    READER$ = (org.apache.avro.io.DatumReader<AirQualityProcessedSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeString(this.sensorId);

    out.writeLong(this.timestamp);

    out.writeDouble(this.aqi);

    out.writeDouble(this.no2);

    out.writeDouble(this.pm25);

    out.writeDouble(this.pm10);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString();

      this.sensorId = in.readString();

      this.timestamp = in.readLong();

      this.aqi = in.readDouble();

      this.no2 = in.readDouble();

      this.pm25 = in.readDouble();

      this.pm10 = in.readDouble();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString();
          break;

        case 1:
          this.sensorId = in.readString();
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.aqi = in.readDouble();
          break;

        case 4:
          this.no2 = in.readDouble();
          break;

        case 5:
          this.pm25 = in.readDouble();
          break;

        case 6:
          this.pm10 = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










