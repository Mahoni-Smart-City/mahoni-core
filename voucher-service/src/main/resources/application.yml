spring:
  datasource:
    url: jdbc:postgresql://34.101.161.17:5432/mahoni?user=mahoni&password=mahoni
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers: 34.128.127.171:9092
    properties:
      schema.registry.url: http://34.128.127.171:8081
    producer:
      bootstrap-servers: 34.128.127.171:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://34.128.127.171:8081
    consumer:
      bootstrap-servers: 34.128.127.171:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://34.128.127.171:8081
        specific.avro.reader: true
  voucher:
    transaction-failed-duration: 10
  security:
    token.secret: 576E5A7234753778214125442A472D4B6150645367566B58703273357638792F
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
server:
  port: 8082
  error:
    include-message: ALWAYS
logging:
  level:
    com: INFO
---
postgres.port: 5434
postgres.host: voucher-db
spring:
  config.activate.on-profile: docker
  datasource:
    url: jdbc:postgresql://${postgres.host:localhost}:${postgres.port}/mahoni?user=test123&password=test123
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap.servers: "PLAINTEXT://kafka:29092"
    producer:
      bootstrap-servers: 34.128.127.171:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://kafka-schema-registry:8081
    consumer:
      bootstrap-servers: "PLAINTEXT://kafka:29092"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://kafka-schema-registry:8081
        specific.avro.reader: true
---
postgres:
  port: 5432
  host: user-db
  database: mahoni
  user: mahonitest123
  password: mahonitest123
server:
  port: 8080
spring:
  config.activate.on-profile: cloud
  datasource:
    url: jdbc:postgresql://${postgres.host:localhost}:${postgres.port}/${postgres.database}?user=${postgres.user}&password=${postgres.password}
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap.servers: 34.128.127.171:9092,34.128.127.171:9093,34.128.127.171:9094
    schema.registry.url: http://34.128.127.171:8081
    producer:
      bootstrap-servers: ${spring.kafka.bootstrap.servers}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: ${spring.kafka.schema.registry.url}
    consumer:
      bootstrap-servers: ${spring.kafka.bootstrap.servers}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: ${spring.kafka.schema.registry.url}
        specific.avro.reader: true
