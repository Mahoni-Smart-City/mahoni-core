spring:
  datasource:
    url: jdbc:postgresql://localhost:5433/mahoni?user=test123&password=test123
    driver-class-name: org.postgresql.Driver
  neo4j:
    uri: neo4j+s://34.101.92.77
    authentication:
      username: neo4j
      password: u0uBlPeYzBc2O73WdXJabtErgXLLEcQq0Sk6CYE0lXc
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap.servers: localhost:9092
    schema.registry.url: http://localhost:8081
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:8081
    consumer:
      bootstrap-servers: localhost:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081
        specific.avro.reader: true
  security:
    qr-token:
      lifespan: 30
      secret: test123
  trip:
    expired-duration: 360
    base-multiplier: 1.0
    aqi-multiplier: 2.0
    duration-multiplier: 2.0
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
server:
  port: 8085
  error:
    include-message: ALWAYS
logging:
  level:
    com: INFO
---
postgres.port: 5433
postgres.host: trip-db
spring:
  config.activate.on-profile: docker
  datasource:
    url: jdbc:postgresql://${postgres.host:localhost}:${postgres.port}/mahoni?user=test123&password=test123
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap.servers: "PLAINTEXT://kafka:29092"
    schema.registry.url: http://kafka-schema-registry:8081
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://kafka-schema-registry:8081
    consumer:
      bootstrap-servers: "PLAINTEXT://kafka:29092"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://kafka-schema-registry:8081
        specific.avro.reader: true
